
lab_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000278  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800043c  08000444  00010444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800043c  0800043c  00010444  2**0
                  CONTENTS
  4 .ARM          00000000  0800043c  0800043c  00010444  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800043c  08000444  00010444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800043c  0800043c  0001043c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000440  08000440  00010440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000444  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000444  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010444  2**0
                  CONTENTS, READONLY
 12 .debug_info   000001f7  00000000  00000000  00010474  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000000f0  00000000  00000000  0001066b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000058  00000000  00000000  00010760  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000040  00000000  00000000  000107b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000f5c  00000000  00000000  000107f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000565  00000000  00000000  00011754  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003d0e  00000000  00000000  00011cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000159c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000ac  00000000  00000000  00015a44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000424 	.word	0x08000424

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000424 	.word	0x08000424

08000204 <main>:
// ------------ user fnc ------------
void display(uint8_t digit);
void my_delay(uint16_t ms);

int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
	// p 144, 57
	*((uint32_t *) 0x40023830) |= 1 | 4; // set rcc for gpio
 800020a:	4b22      	ldr	r3, [pc, #136]	; (8000294 <main+0x90>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a21      	ldr	r2, [pc, #132]	; (8000294 <main+0x90>)
 8000210:	f043 0305 	orr.w	r3, r3, #5
 8000214:	6013      	str	r3, [r2, #0]
	// config leds and buttons p 177 187
	// all pins are inputs by default
	PIN_C->MODER |= 0b0101<<16; // B=8 R=9  pin-led-gnd
 8000216:	4b20      	ldr	r3, [pc, #128]	; (8000298 <main+0x94>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4a1f      	ldr	r2, [pc, #124]	; (8000298 <main+0x94>)
 800021c:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8000220:	6013      	str	r3, [r2, #0]

	uint8_t counter = 0;
 8000222:	2300      	movs	r3, #0
 8000224:	71fb      	strb	r3, [r7, #7]

	// blink just for fun
	SET_LED_R_HIGH;
 8000226:	4b1c      	ldr	r3, [pc, #112]	; (8000298 <main+0x94>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	4a1b      	ldr	r2, [pc, #108]	; (8000298 <main+0x94>)
 800022c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000230:	6153      	str	r3, [r2, #20]
	my_delay(100);
 8000232:	2064      	movs	r0, #100	; 0x64
 8000234:	f000 f882 	bl	800033c <my_delay>
	SET_LED_R_LOW;
 8000238:	4b17      	ldr	r3, [pc, #92]	; (8000298 <main+0x94>)
 800023a:	695b      	ldr	r3, [r3, #20]
 800023c:	4a16      	ldr	r2, [pc, #88]	; (8000298 <main+0x94>)
 800023e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000242:	6153      	str	r3, [r2, #20]
	my_delay(100);
 8000244:	2064      	movs	r0, #100	; 0x64
 8000246:	f000 f879 	bl	800033c <my_delay>


    /* Loop forever */
	for(;;){
		if(counter>0){
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d00c      	beq.n	800026a <main+0x66>
			if(BUTT_B_IS_PRESSED==0){
 8000250:	4b11      	ldr	r3, [pc, #68]	; (8000298 <main+0x94>)
 8000252:	691b      	ldr	r3, [r3, #16]
 8000254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000258:	2b00      	cmp	r3, #0
 800025a:	d106      	bne.n	800026a <main+0x66>
				counter--;
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	3b01      	subs	r3, #1
 8000260:	71fb      	strb	r3, [r7, #7]
				my_delay(500);
 8000262:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000266:	f000 f869 	bl	800033c <my_delay>
			}
		}
		if(counter<3){
 800026a:	79fb      	ldrb	r3, [r7, #7]
 800026c:	2b02      	cmp	r3, #2
 800026e:	d80c      	bhi.n	800028a <main+0x86>
			if(BUTT_R_IS_PRESSED==0){
 8000270:	4b09      	ldr	r3, [pc, #36]	; (8000298 <main+0x94>)
 8000272:	691b      	ldr	r3, [r3, #16]
 8000274:	f003 0320 	and.w	r3, r3, #32
 8000278:	2b00      	cmp	r3, #0
 800027a:	d106      	bne.n	800028a <main+0x86>
				counter++;
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	3301      	adds	r3, #1
 8000280:	71fb      	strb	r3, [r7, #7]
				my_delay(500);
 8000282:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000286:	f000 f859 	bl	800033c <my_delay>
			}
		}
		display(counter);
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	4618      	mov	r0, r3
 800028e:	f000 f805 	bl	800029c <display>
		if(counter>0){
 8000292:	e7da      	b.n	800024a <main+0x46>
 8000294:	40023830 	.word	0x40023830
 8000298:	40020800 	.word	0x40020800

0800029c <display>:
	}
}


// ------------ user fnc ------------
void display(uint8_t digit){
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	71fb      	strb	r3, [r7, #7]
	switch(digit){
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	2b03      	cmp	r3, #3
 80002aa:	d83f      	bhi.n	800032c <display+0x90>
 80002ac:	a201      	add	r2, pc, #4	; (adr r2, 80002b4 <display+0x18>)
 80002ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002b2:	bf00      	nop
 80002b4:	080002c5 	.word	0x080002c5
 80002b8:	080002df 	.word	0x080002df
 80002bc:	080002f9 	.word	0x080002f9
 80002c0:	08000313 	.word	0x08000313
	case 0:// R - LOW, B - LOW
		PIN_C->ODR &= ~LED_R_HIGH_REG;
 80002c4:	4b1c      	ldr	r3, [pc, #112]	; (8000338 <display+0x9c>)
 80002c6:	695b      	ldr	r3, [r3, #20]
 80002c8:	4a1b      	ldr	r2, [pc, #108]	; (8000338 <display+0x9c>)
 80002ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002ce:	6153      	str	r3, [r2, #20]
		PIN_C->ODR &= ~LED_B_HIGH_REG;
 80002d0:	4b19      	ldr	r3, [pc, #100]	; (8000338 <display+0x9c>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	4a18      	ldr	r2, [pc, #96]	; (8000338 <display+0x9c>)
 80002d6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80002da:	6153      	str	r3, [r2, #20]
		break;
 80002dc:	e026      	b.n	800032c <display+0x90>
	case 1:// R - HIGH, B - LOW
		PIN_C->ODR |= LED_R_HIGH_REG;
 80002de:	4b16      	ldr	r3, [pc, #88]	; (8000338 <display+0x9c>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4a15      	ldr	r2, [pc, #84]	; (8000338 <display+0x9c>)
 80002e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002e8:	6153      	str	r3, [r2, #20]
		PIN_C->ODR &= ~LED_B_HIGH_REG;
 80002ea:	4b13      	ldr	r3, [pc, #76]	; (8000338 <display+0x9c>)
 80002ec:	695b      	ldr	r3, [r3, #20]
 80002ee:	4a12      	ldr	r2, [pc, #72]	; (8000338 <display+0x9c>)
 80002f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80002f4:	6153      	str	r3, [r2, #20]
		break;
 80002f6:	e019      	b.n	800032c <display+0x90>
	case 2: // R - LOW, B - HIGH
		PIN_C->ODR &= ~LED_R_HIGH_REG;
 80002f8:	4b0f      	ldr	r3, [pc, #60]	; (8000338 <display+0x9c>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	4a0e      	ldr	r2, [pc, #56]	; (8000338 <display+0x9c>)
 80002fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000302:	6153      	str	r3, [r2, #20]
		PIN_C->ODR |= LED_B_HIGH_REG;
 8000304:	4b0c      	ldr	r3, [pc, #48]	; (8000338 <display+0x9c>)
 8000306:	695b      	ldr	r3, [r3, #20]
 8000308:	4a0b      	ldr	r2, [pc, #44]	; (8000338 <display+0x9c>)
 800030a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800030e:	6153      	str	r3, [r2, #20]
		break;
 8000310:	e00c      	b.n	800032c <display+0x90>
	case 3: // R - HIGH, B - HIGH
		PIN_C->ODR |= LED_R_HIGH_REG;
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <display+0x9c>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	4a08      	ldr	r2, [pc, #32]	; (8000338 <display+0x9c>)
 8000318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800031c:	6153      	str	r3, [r2, #20]
		PIN_C->ODR |= LED_B_HIGH_REG;
 800031e:	4b06      	ldr	r3, [pc, #24]	; (8000338 <display+0x9c>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	4a05      	ldr	r2, [pc, #20]	; (8000338 <display+0x9c>)
 8000324:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000328:	6153      	str	r3, [r2, #20]
		break;
 800032a:	bf00      	nop
	}
}
 800032c:	bf00      	nop
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	40020800 	.word	0x40020800

0800033c <my_delay>:

void my_delay(uint16_t ms){ // Inaccurate delay
 800033c:	b490      	push	{r4, r7}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	80fb      	strh	r3, [r7, #6]
	for(uint64_t i =0; i<= ms*800; i++){
 8000346:	f04f 0300 	mov.w	r3, #0
 800034a:	f04f 0400 	mov.w	r4, #0
 800034e:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8000352:	e006      	b.n	8000362 <my_delay+0x26>
 8000354:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000358:	1c59      	adds	r1, r3, #1
 800035a:	f144 0200 	adc.w	r2, r4, #0
 800035e:	e9c7 1202 	strd	r1, r2, [r7, #8]
 8000362:	88fb      	ldrh	r3, [r7, #6]
 8000364:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000368:	fb02 f303 	mul.w	r3, r2, r3
 800036c:	4619      	mov	r1, r3
 800036e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8000372:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000376:	42a2      	cmp	r2, r4
 8000378:	bf08      	it	eq
 800037a:	4299      	cmpeq	r1, r3
 800037c:	d2ea      	bcs.n	8000354 <my_delay+0x18>
		;
	}

}
 800037e:	bf00      	nop
 8000380:	3710      	adds	r7, #16
 8000382:	46bd      	mov	sp, r7
 8000384:	bc90      	pop	{r4, r7}
 8000386:	4770      	bx	lr

08000388 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000388:	480d      	ldr	r0, [pc, #52]	; (80003c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800038a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800038c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000390:	480c      	ldr	r0, [pc, #48]	; (80003c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000392:	490d      	ldr	r1, [pc, #52]	; (80003c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000394:	4a0d      	ldr	r2, [pc, #52]	; (80003cc <LoopForever+0xe>)
  movs r3, #0
 8000396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000398:	e002      	b.n	80003a0 <LoopCopyDataInit>

0800039a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800039a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800039c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800039e:	3304      	adds	r3, #4

080003a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003a4:	d3f9      	bcc.n	800039a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003a6:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003a8:	4c0a      	ldr	r4, [pc, #40]	; (80003d4 <LoopForever+0x16>)
  movs r3, #0
 80003aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003ac:	e001      	b.n	80003b2 <LoopFillZerobss>

080003ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b0:	3204      	adds	r2, #4

080003b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003b4:	d3fb      	bcc.n	80003ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003b6:	f000 f811 	bl	80003dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ba:	f7ff ff23 	bl	8000204 <main>

080003be <LoopForever>:

LoopForever:
    b LoopForever
 80003be:	e7fe      	b.n	80003be <LoopForever>
  ldr   r0, =_estack
 80003c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003c8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003cc:	08000444 	.word	0x08000444
  ldr r2, =_sbss
 80003d0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003d4:	2000001c 	.word	0x2000001c

080003d8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003d8:	e7fe      	b.n	80003d8 <ADC_IRQHandler>
	...

080003dc <__libc_init_array>:
 80003dc:	b570      	push	{r4, r5, r6, lr}
 80003de:	4e0d      	ldr	r6, [pc, #52]	; (8000414 <__libc_init_array+0x38>)
 80003e0:	4c0d      	ldr	r4, [pc, #52]	; (8000418 <__libc_init_array+0x3c>)
 80003e2:	1ba4      	subs	r4, r4, r6
 80003e4:	10a4      	asrs	r4, r4, #2
 80003e6:	2500      	movs	r5, #0
 80003e8:	42a5      	cmp	r5, r4
 80003ea:	d109      	bne.n	8000400 <__libc_init_array+0x24>
 80003ec:	4e0b      	ldr	r6, [pc, #44]	; (800041c <__libc_init_array+0x40>)
 80003ee:	4c0c      	ldr	r4, [pc, #48]	; (8000420 <__libc_init_array+0x44>)
 80003f0:	f000 f818 	bl	8000424 <_init>
 80003f4:	1ba4      	subs	r4, r4, r6
 80003f6:	10a4      	asrs	r4, r4, #2
 80003f8:	2500      	movs	r5, #0
 80003fa:	42a5      	cmp	r5, r4
 80003fc:	d105      	bne.n	800040a <__libc_init_array+0x2e>
 80003fe:	bd70      	pop	{r4, r5, r6, pc}
 8000400:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000404:	4798      	blx	r3
 8000406:	3501      	adds	r5, #1
 8000408:	e7ee      	b.n	80003e8 <__libc_init_array+0xc>
 800040a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800040e:	4798      	blx	r3
 8000410:	3501      	adds	r5, #1
 8000412:	e7f2      	b.n	80003fa <__libc_init_array+0x1e>
 8000414:	0800043c 	.word	0x0800043c
 8000418:	0800043c 	.word	0x0800043c
 800041c:	0800043c 	.word	0x0800043c
 8000420:	08000440 	.word	0x08000440

08000424 <_init>:
 8000424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000426:	bf00      	nop
 8000428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800042a:	bc08      	pop	{r3}
 800042c:	469e      	mov	lr, r3
 800042e:	4770      	bx	lr

08000430 <_fini>:
 8000430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000432:	bf00      	nop
 8000434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000436:	bc08      	pop	{r3}
 8000438:	469e      	mov	lr, r3
 800043a:	4770      	bx	lr
